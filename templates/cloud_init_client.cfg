#cloud-config
# vim: syntax=yaml
#
# ***********************
# 	---- for more examples look at: ------
# ---> https://cloudinit.readthedocs.io/en/latest/topics/examples.html
# ******************************
#
# This is the configuration syntax that the write_files module
# will know how to understand. encoding can be given b64 or gzip or (gz+b64).
# The content will be decoded accordingly and then written to the path that is
# provided.
#
# Note: Content strings here are truncated for example purposes.
hostname: ${HOSTNAME}
ssh_pwauth: True
chpasswd:
  list: |
     root:terraform-libvirt-linux
  expire: False
users:
      - name: hashicorp
        sudo: ALL=(ALL) NOPASSWD:ALL
        lock_passwd: false
        passwd: $6$rounds=4096$noXcitBdWrInYjDO$TteSvkOeWWALbPVmbamM1iGZzq3HUao8eMUVcGrdSWIfsZPrnYrfpX4SsetRnKrBkkllNgN7zrgfBwXVJwUJj0

write_files:
  - content: |
      [Unit]
      Description=Nomad
      Documentation=https://www.nomadproject.io/docs
      Wants=network-online.target
      After=network-online.target

      [Service]
      ExecReload=/bin/kill -HUP $MAINPID
      ExecStart=/usr/bin/nomad agent -config /etc/nomad.d
      KillMode=process
      KillSignal=SIGINT
      LimitNOFILE=infinity
      LimitNPROC=infinity
      Restart=on-failure
      RestartSec=2
      StartLimitBurst=3
      StartLimitIntervalSec=10
      TasksMax=infinity

      [Install]
      WantedBy=multi-user.target  
    path: /etc/systemd/system/nomad.service
  - content: |
      datacenter = "${DATACENTER_NAME}"
      data_dir = "/opt/nomad"

      vault {
        enabled = true
        tls_skip_verify = true
        address = "https://${NOMAD_SERVER_JOIN_IP}:8200"
      }
    path: /etc/nomad.d/nomad.hcl
  - content: |
      server {
        enabled = false
      }
    path: /etc/nomad.d/server.hcl
  - content: |
      client {
        enabled = true
        servers = ["${NOMAD_SERVER_JOIN_IP}:4647"]
        meta {
          type           = "client"
        }
      }
      plugin "raw_exec" {
        config {
          enabled = ${NOMAD_DRIVER_RAW_EXEC}
        }
      }
    path: /etc/nomad.d/client.hcl

  - content: | ${CONSUL_AGENT_CA}
    path: /etc/consul.d/consul-agent-ca.pem 

  - content: | ${DC1_SERVER_CONSUL_0}
    path: /etc/consul.d/dc1-server-consul-0.pem 

  - content: | ${DC1_SERVER_CONSUL_0_KEY}
    path: /etc/consul.d/dc1-server-consul-0-key.pem 

  - content: |
      datacenter = "dc1"
      data_dir = "/opt/consul"
      encrypt = "${GOSSIP_ENCRYPTION_KEY}"
      ca_file = "/etc/consul.d/consul-agent-ca.pem"
      cert_file = "/etc/consul.d/dc1-server-consul-0.pem"
      key_file = "/etc/consul.d/dc1-server-consul-0-key.pem"
      verify_incoming = true
      verify_outgoing = true
      verify_server_hostname = false
      retry_join = ["${NOMAD_SERVER_JOIN_IP}"]
      server = false
      bootstrap_expect = 0
      ui = true
      bind_addr = "0.0.0.0"
      client_addr = "0.0.0.0"

      ports {
        grpc = 8502
      }

      connect {
        enabled = true
      }

      advertise_addr = "${NODE_IP}"
    path: /etc/consul.d/consul.hcl

runcmd:
  # Init Nomad section
  - curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -
  - apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"
  
  # Init Docker section
  - ${NOMAD_DRIVER_DOCKER} && curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
  - ${NOMAD_DRIVER_DOCKER} && apt-add-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"

  # Install CNI plugin
  - ${NOMAD_DRIVER_DOCKER} && curl -L -o cni-plugins.tgz "https://github.com/containernetworking/plugins/releases/download/v0.9.0/cni-plugins-linux-$( [ $(uname -m) = aarch64 ] && echo arm64 || echo amd64)"-v0.9.0.tgz
  - ${NOMAD_DRIVER_DOCKER} && sudo mkdir -p /opt/cni/bin
  - ${NOMAD_DRIVER_DOCKER} && sudo tar -C /opt/cni/bin -xzf cni-plugins.tgz
  
  # Enable container traffic through the bridge network
  - ${NOMAD_DRIVER_DOCKER} && echo 1 > /proc/sys/net/bridge/bridge-nf-call-arptables
  - ${NOMAD_DRIVER_DOCKER} && echo 1 > /proc/sys/net/bridge/bridge-nf-call-ip6tables
  - ${NOMAD_DRIVER_DOCKER} && echo 1 > /proc/sys/net/bridge/bridge-nf-call-iptables
  - ${NOMAD_DRIVER_DOCKER} && echo "net.bridge.bridge-nf-call-arptables = 1" >> /etc/sysctl.conf
  - ${NOMAD_DRIVER_DOCKER} && echo "net.bridge.bridge-nf-call-ip6tables" >> /etc/sysctl.conf
  - ${NOMAD_DRIVER_DOCKER} && echo "net.bridge.bridge-nf-call-iptables = 1" >> /etc/sysctl.conf

  # Global update
  - apt-get update

  # Intall Consul section
  - sudo apt-get install consul -y
  - mkdir --parents /opt/consul
  - chown --recursive consul:consul /opt/consul
  - chown --recursive consul:consul /etc/consul.d
  - chmod 640 /etc/consul.d/consul.hcl
  - systemctl enable consul
  - systemctl start consul
  
  # Install Nomad section  
  - sudo apt-get install nomad -y
  - mkdir --parents /etc/nomad.d && chmod 700 /etc/nomad.d
  - systemctl enable nomad
  - systemctl start nomad

  # Install Docker section
  - ${NOMAD_DRIVER_DOCKER} && sudo apt-get install docker-ce docker-ce-cli containerd.io -y
  - ${NOMAD_DRIVER_DOCKER} && sudo usermod -aG docker nomad
  - ${NOMAD_DRIVER_DOCKER} && systemctl enable nomad docker containerd
  - ${NOMAD_DRIVER_DOCKER} && systemctl start nomad docker containerd

  # Install Java 11 section
  - ${NOMAD_DRIVER_JAVA} && sudo apt-get install openjdk-11-jre openjdk-11-jdk -y

  - sleep 10

final_message: "Nomad server installed and ready"
